cmake_minimum_required(VERSION 3.18)

project(cvrtgi)

# Contains all libraries, data and shaders needed with pre-compiled .lib
file(ARCHIVE_EXTRACT INPUT ${CMAKE_SOURCE_DIR}/external1.zip DESTINATION ${CMAKE_SOURCE_DIR})
file(ARCHIVE_EXTRACT INPUT ${CMAKE_SOURCE_DIR}/external2.zip DESTINATION ${CMAKE_SOURCE_DIR})
file(ARCHIVE_EXTRACT INPUT ${CMAKE_SOURCE_DIR}/data.zip DESTINATION ${CMAKE_SOURCE_DIR})
file(ARCHIVE_EXTRACT INPUT ${CMAKE_SOURCE_DIR}/data2.zip DESTINATION ${CMAKE_SOURCE_DIR})
file(ARCHIVE_EXTRACT INPUT ${CMAKE_SOURCE_DIR}/data3.zip DESTINATION ${CMAKE_SOURCE_DIR})
file(ARCHIVE_EXTRACT INPUT ${CMAKE_SOURCE_DIR}/data4.zip DESTINATION ${CMAKE_SOURCE_DIR})

include_directories(${CMAKE_SOURCE_DIR}/external/assimp/include)
include_directories(${CMAKE_SOURCE_DIR}/external/Fast-Quadric-Mesh-Simplification)
include_directories(${CMAKE_SOURCE_DIR}/external/gli)
include_directories(${CMAKE_SOURCE_DIR}/external/glm)
include_directories(${CMAKE_SOURCE_DIR}/external/nano-signal-slot)
include_directories(${CMAKE_SOURCE_DIR}/external/spirv-cross)
include_directories(${CMAKE_SOURCE_DIR}/external/spirv-cross/lib/Debug/x64)
include_directories(${CMAKE_SOURCE_DIR}/external/spirv-cross/lib/Release/x64)
include_directories(${CMAKE_SOURCE_DIR}/external/targaLoader)
include_directories(${CMAKE_SOURCE_DIR}/external/VulkanSDK/1.1.101.0/Include)
include_directories(${CMAKE_SOURCE_DIR}/external/VulkanSDK/1.1.101.0/Include/vulkan)
include_directories(${CMAKE_SOURCE_DIR}/external/VulkanSDK/1.1.101.0/Include/vulkan/Lib)

set(INCLUDE_LIST "./include/atomiccounter/atomiccounter.h"
	"./include/commonnamespace.h"
	"./include/headers.h"
	"./include/buffer/buffer.h"
	"./include/buffer/buffermanager.h"
	"./include/camera/camera.h"
	"./include/camera/cameramanager.h"
	"./include/core/coreenum.h"
	"./include/core/coremanager.h"
	"./include/core/eventsignalslot.h"
	"./include/core/gpupipeline.h"
	"./include/core/input.h"
	"./include/core/instance.h"
	"./include/core/logicaldevice.h"
	"./include/core/physicaldevice.h"
	"./include/core/surface.h"
	"./include/core/swapchain.h"
	"./include/framebuffer/framebuffer.h"
	"./include/framebuffer/framebuffermanager.h"
	"./include/geometry/bbox.h"
	"./include/geometry/triangle2d.h"
	"./include/geometry/triangle3d.h"
	"./include/material/exposedstructfield.h"
	"./include/material/material.h"
	"./include/material/materialantialiasing.h"
	"./include/material/materialbufferprefixsum.h"
	"./include/material/materialbuildvoxelshadowmapgeometry.h"
	"./include/material/materialcameravisiblevoxel.h"
	"./include/material/materialclusterization.h"
	"./include/material/materialclusterizationaddup.h"
	"./include/material/materialclusterizationbuildfinalbuffer.h"
	"./include/material/materialclusterizationcomputeaabb.h"
	"./include/material/materialclusterizationcomputeneighbour.h"
	"./include/material/materialclusterizationinitaabb.h"
	"./include/material/materialclusterizationinitvoxeldistance.h"
	"./include/material/materialclusterizationmergeclusters.h"
	"./include/material/materialclusterizationnewcenter.h"
	"./include/material/materialclusterizationprepare.h"
	"./include/material/materialclustervisibility.h"
	"./include/material/materialcolortexture.h"
	"./include/material/materialcomputefrustumculling.h"
	"./include/material/materialdistanceshadowmapping.h"
	"./include/material/materialenum.h"
	"./include/material/materialindirectcolortexture.h"
	"./include/material/materiallightbouncevoxelgaussianfilter.h"
	"./include/material/materiallightbouncevoxelgaussianfiltersecond.h"
	"./include/material/materiallightbouncevoxelirradiance.h"
	"./include/material/materiallighting.h"
	"./include/material/materiallitcluster.h"
	"./include/material/materiallitclusterprocessresults.h"
	"./include/material/materialmanager.h"
	"./include/material/materialprefixsum.h"
	"./include/material/materialresetclusterirradiancedata.h"
	"./include/material/materialscenevoxelization.h"
	"./include/material/materialshadowmappingvoxel.h"
	"./include/material/materialvoxelfacepenalty.h"
	"./include/material/materialvoxelrasterinscenario.h"
	"./include/math/transform.h"
	"./include/model/model.h"
	"./include/node/emitternode.h"
	"./include/node/node.h"
	"./include/parameter/attributedata.h"
	"./include/parameter/attributedefines.h"
	"./include/parameter/multitypebase.h"
	"./include/parameter/multitypeimplementation.h"
	"./include/parameter/multitypeunorderedmap.h"
	"./include/pipeline/pipeline.h"
	"./include/pipeline/pipelinedata.h"
	"./include/rastertechnique/antialiasingtechnique.h"
	"./include/rastertechnique/bufferprefixsumtechnique.h"
	"./include/rastertechnique/bufferprocesstechnique.h"
	"./include/rastertechnique/buildvoxelshadowmapgeometrytechnique.h"
	"./include/rastertechnique/cameravisiblevoxeltechnique.h"
	"./include/rastertechnique/clusterizationbuildfinalbuffertechnique.h"
	"./include/rastertechnique/clusterizationcomputeaabbtechnique.h"
	"./include/rastertechnique/clusterizationcomputeneighbourtechnique.h"
	"./include/rastertechnique/clusterizationinitaabbtechnique.h"
	"./include/rastertechnique/clusterizationmergeclustertechnique.h"
	"./include/rastertechnique/clusterizationpreparetechnique.h"
	"./include/rastertechnique/clusterizationtechnique.h"
	"./include/rastertechnique/clustervisibilitytechnique.h"
	"./include/rastertechnique/clustervisibleprefixsumtechnique.h"
	"./include/rastertechnique/computefrustumcullingtechnique.h"
	"./include/rastertechnique/distanceshadowmappingtechnique.h"
	"./include/rastertechnique/lightbouncevoxelirradiancetechnique.h"
	"./include/rastertechnique/litclustertechnique.h"
	"./include/rastertechnique/rastertechnique.h"
	"./include/rastertechnique/rastertechniqueenum.h"
	"./include/rastertechnique/rastertechniquefactory.h"
	"./include/rastertechnique/rastertechniquemanager.h"
	"./include/rastertechnique/sceneindirectdrawtechnique.h"
	"./include/rastertechnique/scenelightingtechnique.h"
	"./include/rastertechnique/scenerastercolortexturetechnique.h"
	"./include/rastertechnique/scenevoxelizationtechnique.h"
	"./include/rastertechnique/shadowmappingvoxeltechnique.h"
	"./include/rastertechnique/voxelfacepenaltytechnique.h"
	"./include/rastertechnique/voxelrasterinscenariotechnique.h"
	"./include/renderpass/renderpass.h"
	"./include/renderpass/renderpassmanager.h"
	"./include/scene/scene.h"
	"./include/shader/atomiccounterunit.h"
	"./include/shader/image.h"
	"./include/shader/pushconstant.h"
	"./include/shader/resourceenum.h"
	"./include/shader/sampler.h"
	"./include/shader/shader.h"
	"./include/shader/shadermanager.h"
	"./include/shader/shaderreflection.h"
	"./include/shader/shaderstoragebuffer.h"
	"./include/shader/shaderstruct.h"
	"./include/shader/uniform.h"
	"./include/shader/uniformBase.h"
	"./include/texture/irradiancetexture.h"
	"./include/texture/texture.h"
	"./include/texture/textureinfo.h"
	"./include/texture/texturemanager.h"
	"./include/uniformbuffer/cpubuffer.h"
	"./include/uniformbuffer/uniformbuffer.h"
	"./include/uniformbuffer/uniformbuffermanager.h"
	"./include/util/bufferverificationhelper.h"
	"./include/util/containerutilities.h"
	"./include/util/factorytemplate.h"
	"./include/util/genericresource.h"
	"./include/util/getsetmacros.h"
	"./include/util/io.h"
	"./include/util/lightingverificationhelper.h"
	"./include/util/loopmacrodefines.h"
	"./include/util/managertemplate.h"
	"./include/util/mathutil.h"
	"./include/util/objectfactory.h"
	"./include/util/singleton.h"
	"./include/util/vulkanstructinitializer.h"
)

set(SOURCE_LIST "./source/atomiccounter/atomiccounter.cpp"
	"./source/buffer/buffer.cpp"
	"./source/buffer/buffermanager.cpp"
	"./source/camera/camera.cpp"
	"./source/camera/cameramanager.cpp"
	"./source/core/coremanager.cpp"
	"./source/core/eventsignalslot.cpp"
	"./source/core/gpupipeline.cpp"
	"./source/core/input.cpp"
	"./source/core/instance.cpp"
	"./source/core/logicaldevice.cpp"
	"./source/core/physicaldevice.cpp"
	"./source/core/surface.cpp"
	"./source/core/swapchain.cpp"
	"./source/framebuffer/framebuffer.cpp"
	"./source/framebuffer/framebuffermanager.cpp"
	"./source/geometry/bbox.cpp"
	"./source/geometry/triangle2d.cpp"
	"./source/geometry/triangle3d.cpp"
	"./source/material/exposedstructfield.cpp"
	"./source/material/material.cpp"
	"./source/material/materialmanager.cpp"
	"./source/math/transform.cpp"
	"./source/model/model.cpp"
	"./source/node/emitternode.cpp"
	"./source/node/node.cpp"
	"./source/parameter/attributedefines.cpp"
	"./source/pipeline/pipeline.cpp"
	"./source/pipeline/pipelinedata.cpp"
	"./source/rastertechnique/antialiasingtechnique.cpp"
	"./source/rastertechnique/bufferprefixsumtechnique.cpp"
	"./source/rastertechnique/bufferprocesstechnique.cpp"
	"./source/rastertechnique/buildvoxelshadowmapgeometrytechnique.cpp"
	"./source/rastertechnique/cameravisiblevoxeltechnique.cpp"
	"./source/rastertechnique/clusterizationbuildfinalbuffertechnique.cpp"
	"./source/rastertechnique/clusterizationcomputeaabbtechnique.cpp"
	"./source/rastertechnique/clusterizationcomputeneighbourtechnique.cpp"
	"./source/rastertechnique/clusterizationinitaabbtechnique.cpp"
	"./source/rastertechnique/clusterizationmergeclustertechnique.cpp"
	"./source/rastertechnique/clusterizationpreparetechnique.cpp"
	"./source/rastertechnique/clusterizationtechnique.cpp"
	"./source/rastertechnique/clustervisibilitytechnique.cpp"
	"./source/rastertechnique/clustervisibleprefixsumtechnique.cpp"
	"./source/rastertechnique/computefrustumcullingtechnique.cpp"
	"./source/rastertechnique/distanceshadowmappingtechnique.cpp"
	"./source/rastertechnique/lightbouncevoxelirradiancetechnique.cpp"
	"./source/rastertechnique/litclustertechnique.cpp"
	"./source/rastertechnique/rastertechnique.cpp"
	"./source/rastertechnique/rastertechniquefactory.cpp"
	"./source/rastertechnique/rastertechniquemanager.cpp"
	"./source/rastertechnique/sceneindirectdrawtechnique.cpp"
	"./source/rastertechnique/scenelightingtechnique.cpp"
	"./source/rastertechnique/scenerastercolortexturetechnique.cpp"
	"./source/rastertechnique/scenevoxelizationtechnique.cpp"
	"./source/rastertechnique/shadowmappingvoxeltechnique.cpp"
	"./source/rastertechnique/voxelfacepenaltytechnique.cpp"
	"./source/rastertechnique/voxelrasterinscenariotechnique.cpp"
	"./source/renderpass/renderpass.cpp"
	"./source/renderpass/renderpassmanager.cpp"
	"./source/scene/scene.cpp"
	"./source/shader/atomiccounterunit.cpp"
	"./source/shader/image.cpp"
	"./source/shader/pushconstant.cpp"
	"./source/shader/resourceenum.cpp"
	"./source/shader/sampler.cpp"
	"./source/shader/shader.cpp"
	"./source/shader/shadermanager.cpp"
	"./source/shader/shaderreflection.cpp"
	"./source/shader/shaderstoragebuffer.cpp"
	"./source/shader/shaderstruct.cpp"
	"./source/shader/uniformBase.cpp"
	"./source/texture/irradiancetexture.cpp"
	"./source/texture/texture.cpp"
	"./source/texture/textureinfo.cpp"
	"./source/texture/texturemanager.cpp"
	"./source/uniformbuffer/cpubuffer.cpp"
	"./source/uniformbuffer/uniformbuffer.cpp"
	"./source/uniformbuffer/uniformbuffermanager.cpp"
	"./source/util/bufferverificationhelper.cpp"
	"./source/util/genericresource.cpp"
	"./source/util/io.cpp"
	"./source/util/lightingverificationhelper.cpp"
	"./source/util/mathutil.cpp"
	"./source/util/vulkanstructinitializer.cpp"
	"./source/main.cpp"
)

add_definitions(-DVK_USE_PLATFORM_WIN32_KHR=1)

add_executable(cvrtgi ${INCLUDE_LIST} ${SOURCE_LIST})

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${INCLUDE_LIST}) # Create the source groups for source tree with root at CMAKE_CURRENT_SOURCE_DIR.
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${SOURCE_LIST})  # Create the include groups for source tree with root at CMAKE_CURRENT_SOURCE_DIR.

set(LibrariesToLink 
	debug ${CMAKE_SOURCE_DIR}/external/VulkanSDK/1.1.101.0/Lib/vulkan-1.lib           optimized ${CMAKE_SOURCE_DIR}/external/VulkanSDK/1.1.101.0/Lib/vulkan-1.lib
	debug ${CMAKE_SOURCE_DIR}/external/assimp/lib/Debug/x64/assimpd.lib               optimized ${CMAKE_SOURCE_DIR}/external/assimp/lib/Release/x64/assimp.lib
	debug ${CMAKE_SOURCE_DIR}/external/spirv-cross/lib/Debug/x64/spirv-cross-core.lib optimized ${CMAKE_SOURCE_DIR}/external/spirv-cross/lib/Release/x64/spirv-cross-core.lib
	debug ${CMAKE_SOURCE_DIR}/external/spirv-cross/lib/Debug/x64/spirv-cross-glsl.lib optimized ${CMAKE_SOURCE_DIR}/external/spirv-cross/lib/Release/x64/spirv-cross-glsl.lib
	debug ${CMAKE_SOURCE_DIR}/external/spirv-cross/lib/Debug/x64/SPIRVd.lib           optimized ${CMAKE_SOURCE_DIR}/external/spirv-cross/lib/Release/x64/SPIRV.lib
	debug ${CMAKE_SOURCE_DIR}/external/spirv-cross/lib/Debug/x64/glslangd.lib         optimized ${CMAKE_SOURCE_DIR}/external/spirv-cross/lib/Release/x64/glslang.lib
	debug ${CMAKE_SOURCE_DIR}/external/spirv-cross/lib/Debug/x64/OGLCompilerd.lib     optimized ${CMAKE_SOURCE_DIR}/external/spirv-cross/lib/Release/x64/OGLCompiler.lib
	debug ${CMAKE_SOURCE_DIR}/external/spirv-cross/lib/Debug/x64/OSDependentd.lib     optimized ${CMAKE_SOURCE_DIR}/external/spirv-cross/lib/Release/x64/OSDependent.lib
	debug ${CMAKE_SOURCE_DIR}/external/spirv-cross/lib/Debug/x64/hlsld.lib            optimized ${CMAKE_SOURCE_DIR}/external/spirv-cross/lib/Release/x64/hlsl.lib
	debug ${CMAKE_SOURCE_DIR}/external/spirv-cross/lib/Debug/x64/SPIRV-Tools-optd.lib optimized ${CMAKE_SOURCE_DIR}/external/spirv-cross/lib/Release/x64/SPIRV-Tools-opt.lib
	debug ${CMAKE_SOURCE_DIR}/external/spirv-cross/lib/Debug/x64/SPIRV-Toolsd.lib     optimized ${CMAKE_SOURCE_DIR}/external/spirv-cross/lib/Release/x64/SPIRV-Tools.lib
	debug ${CMAKE_SOURCE_DIR}/external/spirv-cross/lib/Debug/x64/SPVRemapperd.lib     optimized ${CMAKE_SOURCE_DIR}/external/spirv-cross/lib/Release/x64/SPVRemapper.lib
)

target_link_libraries(cvrtgi ${LibrariesToLink})
